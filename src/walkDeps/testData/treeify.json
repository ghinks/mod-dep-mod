{
  "_id": "treeify",
  "_rev": "39-e3659de53bdf7fe30e074dbbd5892f69",
  "name": "treeify",
  "description": "converts a JS object into a nice and readable tree structure for the console",
  "dist-tags": {
    "latest": "1.1.0"
  },
  "versions": {
    "0.1.0": {
      "name": "treeify",
      "version": "0.1.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\nConverts a JS object into a nice, visible depth-indented tree for console printing",
      "_id": "treeify@0.1.0",
      "dist": {
        "shasum": "e4d46479b15efae39e3eece4a0c0397ffa6c4827",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.1.0.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.1.1": {
      "name": "treeify",
      "version": "0.1.1",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n\n```\n$ npm test\n```\n",
      "_id": "treeify@0.1.1",
      "dist": {
        "shasum": "2188d2ba882f49782a009ce4bdc59b5b0cadc98a",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.1.1.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.2.0": {
      "name": "treeify",
      "version": "0.2.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n\n```\n$ npm test\n```\n",
      "_id": "treeify@0.2.0",
      "dist": {
        "shasum": "dc4ba40ddacd28bb8d8ccc6ccfa9c6de0353787c",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.2.0.tgz"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.3.0": {
      "name": "treeify",
      "version": "0.3.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), lineCallback (function))\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n\n```\n$ npm test\n```\n",
      "_id": "treeify@0.3.0",
      "dist": {
        "shasum": "7d5e14dad59748a3df00315aef2cd42b15aa0f0d",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.3.0.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.4.0": {
      "name": "treeify",
      "version": "0.4.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to not break existing uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nWait, what?\n-----------\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nRunning the tests\n-----------------\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
      "_id": "treeify@0.4.0",
      "dist": {
        "shasum": "9c3d9190c01e298a91f4ef4d54e03d4042c5e307",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.4.0.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.4.1": {
      "name": "treeify",
      "version": "0.4.1",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec --isolate"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.8"
      },
      "readme": "node-treeify\n============\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to not break existing uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nWait, what?\n-----------\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nRunning the tests\n-----------------\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
      "_id": "treeify@0.4.1",
      "dist": {
        "shasum": "aad4e7daff1ebe5f9caa051bdb4e4b433eb30896",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.4.1.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.4.2": {
      "name": "treeify",
      "version": "0.4.2",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.6"
      },
      "readme": "node-treeify\n============\n\n[![Build Status](https://travis-ci.org/notatestuser/node-treeify.png?branch=master)](https://travis-ci.org/notatestuser/node-treeify)\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure \ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {                                                  \n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nUsage\n-----\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to ensure we don't break uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nWait, what?\n-----------\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\nRunning the tests\n-----------------\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
      "_id": "treeify@0.4.2",
      "dist": {
        "shasum": "86a362905453caba41dfdda367b37bdd3b9030b8",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-0.4.2.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.0.0": {
      "name": "treeify",
      "version": "1.0.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice, visible tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/node-treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.6"
      },
      "readme": "node-treeify\n============\n\n[![Build Status](https://travis-ci.org/notatestuser/node-treeify.png?branch=master)](https://travis-ci.org/notatestuser/node-treeify)\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure\ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {\n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nInstallation\n------------\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\n### ...or in a browser\n\nTreeify cooperates with Node, AMD or browser globals to create a module. This means it'll work\nin a browser regardless of whether you have an AMD-compliant module loader or not. If such\na loader isn't found when the script is executed, you may access Treeify at ```window.treeify```.\n\nUsage\n-----\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to ensure we don't break uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nRunning the tests\n-----------------\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
      "_id": "treeify@1.0.0",
      "dist": {
        "shasum": "ba46faa44983f0b70c1a83aeab6169e83a202b1d",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-1.0.0.tgz"
      },
      "_npmVersion": "1.1.59",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.0.1": {
      "name": "treeify",
      "version": "1.0.1",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice and readable tree structure for the console",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "https://github.com/notatestuser/treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.6"
      },
      "readme": "treeify [![Build Status](https://travis-ci.org/notatestuser/node-treeify.png?branch=master)](https://travis-ci.org/notatestuser/node-treeify)\n=======\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure\ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {\n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nGetting it\n----------\n\n### For use with node.js\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\n### For use in a browser\n\nTreeify cooperates with Node, AMD or browser globals to create a module. This means it'll work\nin a browser regardless of whether you have an AMD-compliant module loader or not. If such\na loader isn't found when the script is executed, you may access Treeify at ```window.treeify```.\n\nUsage\n-----\n\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to ensure we don't break uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
      "readmeFilename": "README.md",
      "_id": "treeify@1.0.1",
      "dist": {
        "shasum": "69b3cd022022a168424e7cfa1ced44c939d3eb2f",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-1.0.1.tgz"
      },
      "_from": ".",
      "_npmVersion": "1.2.15",
      "_npmUser": {
        "name": "notatestuser",
        "email": "notatestuser@gmail.com"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.1.0": {
      "name": "treeify",
      "version": "1.1.0",
      "author": {
        "name": "Luke Plaster",
        "email": "notatestuser@gmail.com"
      },
      "description": "converts a JS object into a nice and readable tree structure for the console",
      "license": "MIT",
      "scripts": {
        "test": "./node_modules/vows/bin/vows --spec"
      },
      "main": "./treeify",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/notatestuser/treeify.git"
      },
      "keywords": [
        "object",
        "tree",
        "print",
        "console",
        "pretty"
      ],
      "devDependencies": {
        "vows": "git://github.com/Filirom1/vows.git#expect"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://lp.mit-license.org/"
        }
      ],
      "engines": {
        "node": ">=0.6"
      },
      "gitHead": "3855e5d6e3f6b7236b1b41d78ecde4a9cb6bb1c7",
      "bugs": {
        "url": "https://github.com/notatestuser/treeify/issues"
      },
      "homepage": "https://github.com/notatestuser/treeify#readme",
      "_id": "treeify@1.1.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "notatestuser",
        "email": "me@lukep.org"
      },
      "maintainers": [
        {
          "name": "notatestuser",
          "email": "notatestuser@gmail.com"
        }
      ],
      "dist": {
        "integrity": "sha512-1m4RA7xVAJrSGrrXGs0L3YTwyvBs2S8PbRHaLZAkFw7JR8oIFwYtysxlBZhYIa7xSyiYJKZ3iGrrk55cGA3i9A==",
        "shasum": "4e31c6a463accd0943879f30667c4fdaff411bb8",
        "tarball": "https://registry.npmjs.org/treeify/-/treeify-1.1.0.tgz",
        "fileCount": 9,
        "unpackedSize": 22209
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/treeify_1.1.0_1518789059981_0.8757387170182052"
      }
    }
  },
  "readme": "treeify ![](https://img.shields.io/npm/v/treeify.svg) ![](https://img.shields.io/npm/dt/treeify.svg)\n=======\n\n[![Build Status](https://travis-ci.org/notatestuser/treeify.png?branch=master)](https://travis-ci.org/notatestuser/treeify)\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure\ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {\n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nGetting it\n----------\n\n### For use with node.js\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\n### For use in a browser\n\nTreeify cooperates with Node, AMD or browser globals to create a module. This means it'll work\nin a browser regardless of whether you have an AMD-compliant module loader or not. If such\na loader isn't found when the script is executed, you may access Treeify at ```window.treeify```.\n\nUsage\n-----\n\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to ensure we don't break uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
  "maintainers": [
    {
      "name": "notatestuser",
      "email": "notatestuser@gmail.com"
    }
  ],
  "time": {
    "modified": "2018-02-16T13:51:01.003Z",
    "created": "2012-09-30T23:40:36.461Z",
    "0.1.0": "2012-09-30T23:40:37.969Z",
    "0.1.1": "2012-10-01T21:08:59.779Z",
    "0.2.0": "2012-10-25T13:28:03.215Z",
    "0.3.0": "2012-12-23T23:44:56.084Z",
    "0.4.0": "2012-12-24T01:15:37.637Z",
    "0.4.1": "2012-12-24T01:16:16.153Z",
    "0.4.2": "2012-12-27T16:50:49.616Z",
    "1.0.0": "2013-03-30T23:00:45.671Z",
    "1.0.1": "2013-04-06T12:24:38.173Z",
    "1.1.0": "2018-02-16T13:51:00.030Z"
  },
  "author": {
    "name": "Luke Plaster",
    "email": "notatestuser@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/notatestuser/treeify.git"
  },
  "users": {
    "notatestuser": true,
    "chrisyipw": true,
    "tsz662": true,
    "yokubee": true,
    "heartnett": true,
    "usex": true
  },
  "homepage": "https://github.com/notatestuser/treeify#readme",
  "keywords": [
    "object",
    "tree",
    "print",
    "console",
    "pretty"
  ],
  "bugs": {
    "url": "https://github.com/notatestuser/treeify/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "_attachments": {}
}